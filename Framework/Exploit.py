
import os
import platform
from Session import *

class Exploit:

    def __init__(self):
        self._scapys = []
        self._exploitDictionary = { -1 : 'Scapy', 
                                    -2 : '', 
                                    1  : 'Send ICMP (NOT DONE)',
                                    -3 : '',
                                    -4 : 'Database',
                                    20 : 'Patator MySql Bruteforce',
                                    21 : 'Nmap MySql Bruteforce',
                                    22 : 'Hydra MySql Bruteforce (NOT DONE)',
                                    23 : 'Nmap MS-SQL Bruteforce',
                                    -5 : '',
                                    -6 : 'Vulnerability Scanning',
                                    30 : 'Searchsploit',
                                    31 : 'Recong-ng',
                                    32 : 'Nexpose',
                                    33 : 'Nmap',
                                    34 : 'Nessus',
                                    -7 : '',
                                    -8 : 'SMB/Windows Specific',
                                    50 : 'SMB Client'}

    def getExploitDictionary(self):
        return self._exploitDictionary

    def run(self, index):
        if index == 1:      # Scapy
            print('NOT DONE')
        elif index == 20:   # Patator MySql Bruteforce
            # patator mysql_login host=192.168.0.51 user=root password=FILE0 0=/usr/share/wordlists/rockyou.txt -x ignore:fgrep='Access denied' --max-retries=-1 --threads=50 timeout=100
            filename = session.getExploitDir() + '/patator_mysql_login_' + session.getRemoteHost().replace('/', '') + '.out'
            cmd = 'patator mysql_login host=' + session.getRemoteHost() + ' user=root password=FILE0 0=' + session.getWordlist()
            options = ' -x ignore:fgrep=\'Access denied\' --max-retries=-1 --threads=50 timeout=100 | tee ' + str(filename)
            session.runThreadedCmd(cmd + options, 'Patator MySQL Bruteforce')
        elif index == 21:   # Nmap MySql Bruteforce
            filename = session.getExploitDir() + '/nmap_mysql_login_' + session.getRemoteHost().replace('/', '') + '.out'
            cmd = 'nmap --script=mysql-brute ' + session.getRemoteHost() + ' | tee ' + str(filename)
            session.runThreadedCmd(cmd + options, 'Nmap MySQL Bruteforce')
        elif index == 22:   # Hydra MySql Bruteforce
            # hydra -L usernames.txt -P xxxxx.txt <ip> mysql
            filename = session.getExploitDir() + '/hydra_mysql_login_' + session.getRemoteHost().replace('/', '') + '.out'
            cmd = 'hydra -L usernames.txt -P xxxxx.txt ' + session.getRemoteHost() + ' mysql ' + ' | tee ' + str(filename)
            session.runThreadedCmd(cmd + options, 'Hydra MySQL Bruteforce')
        elif index == 23:   # Nmap MS-SQL Bruteforce
            # nmap -p 1433 --script ms-sql-brute --script-args userdb=customuser.txt,passdb=custompass.txt <host>
            filename = session.getExploitDir() + '/nmap_mysql_login_' + session.getRemoteHost().replace('/', '') + '.out'
            cmd = 'nmap --script=mysql-brute ' + session.getRemoteHost() + ' | tee ' + str(filename)
            session.runThreadedCmd(cmd + options, 'Nmap MySQL Bruteforce')
        elif index == 30:   # Searchsploit
            print('Enter search terms: ')
            terms = input()
            outFile = session.getExploitDir() + '/searchsploit_' + fn + '.json'
            cmd = 'searchsploit -j --nmap ' + session.getIntelDir() + '/' + fn + ' | tee ' + outFile
            session.runCmdSimple(cmd, 'Searching for known vulnerabilties with searchsploit', outFile)
        elif index == 31:   # Recong-ng
            print('NOT DONE')
        elif index == 32:   # Nexpose
            print('NOT DONE')
        elif index == 33:   # Nmap
            print('NOT DONE')
        elif index == 34:   # Nessus
            session.runCmdSimple('/etc/init.d/nessusd start')
            session.runCmdSimple('nessus-update-plugins')
            print('Enter Nessus admin password: ')
            password = input()
            targetFile = session.getIntelDir() + '/nessus_target.txt'
            session.runCmdSimple('echo ' + session.getRemoteHost() + ' >> ' + targetFile)
            # nessus -q -x -T html 192.168.1.1 1241 admin adminpassword filewithtargets.txt resultsfile.html
            filename = session.getExploitDir() + '/nessus_' + session.getRemoteHost().replace('/', '') + '.html'
            cmd = 'nessus -q -x -T html localhost 1241 admin ' + password + ' ' + targetFile + ' ' + filename
            session.runThreadedCmd(cmd, 'Nessus Scan')
        elif index == 50:   # SMB Client
            print('Manual Null session testing')
            if platform.system() == 'Windows':
                session.runCmdSimple('net use \\' + session.getRemoteHost() + '\IPC$ "" /u:""', 'Manual Null session testing')
            else:
                session.runCmdSimple('smbclient -L //' + session.getRemoteHost(), 'Manual Null session testing')

            if platform.system() == 'Windows':
                pass
            else:
                file = session.getExploitDir() + '/acccheck.out'
                cmd = 'acccheck -v -t ' + session.getRemoteHost() + ' -P ' + session.getWordlist() + ' | tee ' + file
                session.runThreadedCmd(cmd, 'Acccheck')

        else:
            return 'Invalid selection'
        